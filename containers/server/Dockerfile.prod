# syntax=docker/dockerfile:1

ARG NODE_VERSION=22.6.0

################################################################################
# Use node image for base image for all stages.
FROM node:${NODE_VERSION}-alpine AS base

# Set working directory for all build stages.
WORKDIR /usr/src/app

# Install npm (usually already included in node images, but you can specify the version if needed).
RUN npm install -g npm

################################################################################
# Create a stage for installing production dependencies.
FROM base AS deps

# Download dependencies as a separate step to take advantage of Docker's caching.
COPY package.json package-lock.json ./ 
RUN npm ci --production --frozen-lockfile

################################################################################
# Create a stage for building the application.
FROM deps AS build

# Install all dependencies (including dev dependencies) to build the app.
RUN npm ci --frozen-lockfile

# Copy the rest of the application files.
COPY ./ /usr/src/app/

# Build the application.
RUN npm run build

# Generate the Prisma client.
RUN npm run generate

################################################################################
# Create a final stage to run the application.
FROM base AS final

# Use production node environment by default.
ENV NODE_ENV prod

# Run the application as a non-root user.
USER node

# Copy package.json so that package manager commands can be used.
COPY package.json . 

# Copy the production dependencies and built application from previous stages.
COPY --from=deps /usr/src/app/node_modules ./node_modules
COPY --from=build /usr/src/app/dist ./dist

# Expose the port that the application listens on (Optional, depends on your application).
# EXPOSE 3000

# Run the application.
CMD npm run start
